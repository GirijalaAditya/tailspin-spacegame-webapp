trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    exclude:
    - docs/*
    - README.md

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '6.x'
  bld.flavor: 'Release'
  disable.coverage.autogenerate: 'true'

stages:
  - stage: Build
    displayName: 'Dotnet Build' 
    jobs:
      - job: Build
        steps:
        - checkout: self
          displayName: Checkout sources
          submodules: recursive
        
        - task: UseDotNet@2
          displayName: 'Use .NET SDK $(dotnetSdkVersion)'
          inputs:
            version: '$(dotnetSdkVersion)'
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: Bash@3
          displayName: Prepare Environment
          inputs:
            targetType: filePath
            filePath: bld/linux/prep-env.sh
            
        - task: Npm@1
          displayName: 'Run npm install'
          inputs:
            verbose: false

        - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
          displayName: 'Compile Sass assets'

        - task: gulp@1
          displayName: 'Run gulp tasks'

        - script: |
            echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt
          displayName: 'Write build info'
          workingDirectory: $(wwwrootDir)

        - task: DotNetCoreCLI@2
          displayName: 'Restore project dependencies'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build the project - $(buildConfiguration)'
          inputs:
            command: 'build'
            arguments: '--no-restore -nowarn:CS7035 -c $(bld.flavor) -p:PackageVersion=$(bld.nuget_version) -p:FileVersion=$(bld.version) -p:AssemblyVersion=$(bld.asm_version) -p:InformationalVersion=$(bld.nuget_version)-$(Build.BuildNumber) -p:Version=$(bld.base_version) -p:IncludeSource=true'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Install .NET tools from local manifest'
          inputs:
            command: custom
            custom: tool
            arguments: 'restore'

        - task: DotNetCoreCLI@2
          displayName: 'Run unit tests - $(buildConfiguration)'
          inputs:
            command: 'test'
            arguments: '--no-build --configuration $(buildConfiguration) -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura -p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
            publishTestResults: true
            projects: '**/*.Tests.csproj'
        
        - task: DotNetCoreCLI@2
          displayName: 'Create code coverage report'
          inputs:
            command: custom
            custom: tool
            arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
        
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage report'
          inputs:
            codeCoverageTool: 'cobertura'
            summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs:
            command: 'publish'
            projects: '**/*.csproj'
            publishWebProjects: false
            zipAfterPublish: false
            modifyOutputPath: false
            #arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
            arguments: '--no-build -c $(bld.flavor) -p:PublishDir=pubout'

        - task: ArchiveFiles@2
          displayName: 'Create Zip file'
          condition: succeeded()
          inputs:
            rootFolderOrFile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/pubout'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true
            verbose: false
            quiet: false

        # - task: PublishBuildArtifacts@1
        #   displayName: 'Publish Artifact: drop'
        #   condition: succeeded()
