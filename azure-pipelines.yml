trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    exclude:
    - docs/*
    - README.md

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: tailspin-spacegame-web-deploy
      type: github
      endpoint: aditya2000learning
      name: aditya2000learning/tailspin-spacegame-web-deploy

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '6.x'

stages:
  - stage: Code_Build
    displayName: 'Dotnet Build' 
    jobs:
      - job: Build
        steps:
        - checkout: self
        - task: UseDotNet@2
          displayName: 'Use .NET SDK $(dotnetSdkVersion)'
          inputs:
            version: '$(dotnetSdkVersion)'

        - task: Npm@1
          displayName: 'Run npm install'
          inputs:
            verbose: false

        - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
          displayName: 'Compile Sass assets'

        - task: gulp@1
          displayName: 'Run gulp tasks'

        - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
          displayName: 'Write build info'
          workingDirectory: $(wwwrootDir)

        - task: DotNetCoreCLI@2
          displayName: 'Restore project dependencies'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build the project - $(buildConfiguration)'
          inputs:
            command: 'build'
            arguments: '--no-restore --configuration $(buildConfiguration)'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Install .NET tools from local manifest'
          inputs:
            command: custom
            custom: tool
            arguments: 'restore'

        - task: DotNetCoreCLI@2
          displayName: 'Run unit tests - $(buildConfiguration)'
          inputs:
            command: 'test'
            arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
            publishTestResults: true
            projects: '**/*.Tests.csproj'
        
        - task: DotNetCoreCLI@2
          displayName: 'Create code coverage report'
          inputs:
            command: custom
            custom: tool
            arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
        
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage report'
          inputs:
            codeCoverageTool: 'cobertura'
            summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs:
            command: 'publish'
            #projects: '**/*.csproj'
            projects: '$(System.DefaultWorkingDirectory)/**/Tailspin.SpaceGame.Web.csproj'
            publishWebProjects: false
            arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
            zipAfterPublish: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: drop'
          condition: succeeded()


  - stage: 'Build'
    displayName: 'Build the web application'
    jobs: 
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'ubuntu-latest'
        demands:
        - npm

      variables:
        wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
        dotnetSdkVersion: '6.x'

      steps:
      - checkout: tailspin-spacegame-web-deploy
      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotnetSdkVersion)'
        inputs:
          version: '$(dotnetSdkVersion)'

      - task: Npm@1
        displayName: 'Run npm install'
        inputs:
          verbose: false

      - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
        displayName: 'Compile Sass assets'

      - task: gulp@1
        displayName: 'Run gulp tasks'

      - script: |
          echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt
        displayName: 'Write build info'
        workingDirectory: $(wwwrootDir)

      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build the project - $(buildConfiguration)'
        inputs:
          command: 'build'
          arguments: '--no-restore --configuration $(buildConfiguration)'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Publish the project - $(buildConfiguration)'
        inputs:
          command: 'publish'
          projects: '$(System.DefaultWorkingDirectory)/**/Tailspin.SpaceGame.Web.csproj' 
          publishWebProjects: false
          arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
          zipAfterPublish: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

  - stage: 'Deploy'
    displayName: 'Deploy to the dev environment'
    dependsOn: Build
    jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-latest'
      environment: deploy
      variables:
      - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: 'Azure App Service Deploy: website'
              inputs:
                azureSubscription: 'azure-sc'
                appType: 'webAppLinux'
                appName: '$(WebAppName)'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

    - job: RunUITests
      dependsOn: Deploy
      displayName: 'Run UI tests'
      pool:
        vmImage: 'windows-2019'
      variables:
      - group: 'Release'
      steps: 
      - checkout: tailspin-spacegame-web-deploy
      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotnetSdkVersion)'
        inputs:
          version: '$(dotnetSdkVersion)'
      - task: DotNetCoreCLI@2
        displayName: 'Build the project - $(buildConfiguration)'
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'
          projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'
      - task: DotNetCoreCLI@2
        displayName: 'Run unit tests - $(buildConfiguration)'
        inputs:
          command: 'test'
          arguments: '--no-build --configuration $(buildConfiguration)'
          publishTestResults: true
          projects: '$(System.DefaultWorkingDirectory)/**/*UITests.csproj'

